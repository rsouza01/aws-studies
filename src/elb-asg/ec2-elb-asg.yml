AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation stack to create a basic load balancer and auto scaling group"

Parameters:
  availabilityzone:
    Description: "Required. Availability zone"
    Type: "String"
    Default: "us-east-1a"
  desiredclustersize:
    Description: "Required. Desired number of instances"
    Type: "Number"
    Default: "1"
  minclustersize:
    Description: "Required. Min number of instances"
    Type: "Number"
    Default: "1"
  maxclustersize:
    Description: "Required. Max number of instances"
    Type: "Number"
    Default: "3"

Resources:
  EC2ELBASGLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          CidrIp: 0.0.0.0/0
          ToPort: 22

  # EC2ELBASGEC2SecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: EC2 Security Group
  #     SecurityGroupIngress:
  #       - IpProtocol: -1
  #         SourceSecurityGroupId: !GetAtt EC2ELBASGLoadBalancerSecurityGroup.GroupId

  # target group
  # register targets
  # create listener

  VPC: 
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: "10.1.0.0/16"
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.1.10.0/24
        AvailabilityZone: !Select [ 0, !GetAZs ]
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A        


  EC2ELBASGEC2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref EC2ELBASGLoadBalancerSecurityGroup

#   #EC2 Config
#   EC2LaunchConfig:
#     Type: AWS::AutoScaling::LaunchConfiguration
#     Properties:
#       ImageId: ami-062f7200baf2fa504
#       SecurityGroups:
#         - Ref: EC2ELBASGEC2SecurityGroup
#       #- Ref: EC2ELBASGLoadBalancerSecurityGroup
#       InstanceType: t2.micro
#       BlockDeviceMappings:
#         - DeviceName: "/dev/sdk"
#           Ebs:
#             VolumeSize: "50"
#         - DeviceName: "/dev/sdc"
#           VirtualName: ephemeral0
#       UserData:
#         Fn::Base64: !Sub |
#           #!/bin/bash
#           sudo su
#           yum update -y
#           yum install -y httpd.x86_64
#           systemctl start httpd.service
#           systemctl enable httpd.service
#           echo "Hello World from $(hostname -f)" > /var/www/html/index.html

#   EC2ELBASGAutoScalingGroup:
#     Type: AWS::AutoScaling::AutoScalingGroup
#     Properties:
#       AvailabilityZones:
#         Fn::GetAZs: ""
#       LaunchConfigurationName:
#         Ref: EC2LaunchConfig
#       MinSize: !Ref minclustersize
#       MaxSize: !Ref maxclustersize
#       LoadBalancerNames:
#         - Ref: EC2ELBASGEC2LoadBalancer

# Outputs:
#   URL:
#     Description: The URL of the website
#     Value:
#       Fn::Join:
#         - ""
#         - - http://
#           - Fn::GetAtt:
#               - EC2ELBASGEC2LoadBalancer
#               - DNSName
